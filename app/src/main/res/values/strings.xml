<resources>
    <string name="app_name">Deque University for Android</string>
    <string name="app_name_short">DequeU</string>
    <string name="navigation_drawer_title">Deque University for Android</string>

    <string name="navigation_drawer_open">Open navigation drawer</string>
    <string name="navigation_drawer_close">Close navigation drawer</string>
    <string name="navigation_drawer_heading_demos">Demos</string>

    <string name="aac_logo_cont_desc">Deque logo</string>
    <string name="aac_navigation_drawer_non_sighted_icon_cont_desc">Non sighted simulation icon</string>
    <string name="aac_navigation_drawer_non_sighted_icon_text">TalkBack Simulation</string>

    <string name="action_example">Example action</string>

    <string name="action_settings">Settings</string>

    <!-- Global Story Strings-->
    <string name="aac_tab_title_about">About</string>
    <string name="aac_tab_title_broken">Broken</string>
    <string name="aac_tab_title_fixed">Fixed</string>
    <string name="aac_learn_more">Learn More About:</string>

    <!-- Links -->
    <string name="aac_talkBack_link"><a href="http://support.google.com/accessibility/android/answer/6007100?hl=en">TalkBack</a></string>
    <string name="aac_contact_us_link"><a href="http://accessibility.deque.com/contact-deque-today">Deque: Contact Us</a></string>
    <string name="aac_website_link"><a href="http://www.deque.com/">Deque: Website</a></string>
    <string name="aac_cont_desc_link"><a href="http://developer.android.com/training/accessibility/accessible-app.html#contentdesc">Content Descriptions</a></string>
    <string name="aac_label_for_link"><a href="http://developer.android.com/reference/android/R.attr.html#labelFor">Label For Attributes </a></string>
    <string name="aac_editText_link"><a href="http://developer.android.com/reference/android/widget/EditText.html">EditTexts</a></string>
    <string name="aac_image_view_link"><a href="http://developer.android.com/reference/android/widget/ImageView.html">ImageViews</a></string>
    <string name="aac_text_view_link"><a href="http://developer.android.com/reference/android/widget/TextView.html">TextViews</a></string>
    <string name="aac_hint_link"><a href="http://developer.android.com/reference/android/R.attr.html#hint">Hints</a></string>
    <string name="aac_tabHost_link"><a href="http://developer.android.com/reference/android/widget/TabHost.html">TabHost</a></string>

    <!-- Intro Story Strings-->
    <string name="aac_intro_title">Introduction</string>
    <string name="aac_intro_tab_1">Accessibility 101</string>

    <string name="aac_intro_about_paragraph1">Welcome to Accessibility 101.  This app will take you through a set of demonstrations that aim to help developers understand the implications the Android Accessibility APIs have for users with disabilities.\n\nBe sure to enable <i>TalkBack</i>.  The demonstrations in this app use Android\'s accessibility APIs and are only meaningful in this context.  It is also helpful to enable the <i>TalkBack</i> shortcut, so you can turn <i>TalkBack</i> on and off easily.</string>

    <string name="aac_intro_deque_heading">About Deque</string>
    <string name="aac_intro_deque_paragraph1">Digital accessibility is both our mission and our passion. For over fifteen years we have been helping major corporations, government agencies, and other organizations ensure that their websites and mobile apps are accessible to everyone. Every one of us at Deque, and some of us have been with the company since it was founded in 1999, cares deeply about making sure people with disabilities are able to fully enjoy the benefits of the web. Helping our customers grow their brands, be inclusive and provide all of their customers with the best possible digital customer experience gives us joy. No matter who you work with at Deque you can be confident that you are in skillful and caring hands. Feel free to <i>Contact Us</i> or visit our <i>website</i> for more information.</string>

    <!-- Labels Story Strings-->
    <string name="aac_labels_title">Labels</string>

    <string name="aac_labels_content_description">This is a content description.</string>

    <string name="aac_labels_about_introduction">In the Android Accessibility world there are multiple ways of providing alternate text for a control.  The <i>content description</i> is the most basic.  However, you can also use the <i>label for</i> attribute.  By marking a text element as the <i>label for</i> something, you associate a visible label with the announcement in TalkBack.  While not all controls require a <i>content description</i>, all controls that do not contain text as a primary feature of the control, absolutely require a label of some kind!  Labels are not an Android element, it is a word we have chosen to represent the presence of either a <i>label for</i> or a <i>content description</i>.  In general, the <i>label for</i> property should be preferred.</string>

    <string name="aac_labels_about_heading_1"><i>Content Description</i> Attribute</string>
    <string name="aac_labels_about_visible_text_1">Visible Text 1</string>
    <string name="aac_labels_about_paragraph_1"><i>Content descriptions</i> are similar to alt text in HTML.  They provide a control that otherwise has no string content, with a description of what the control is.  When writing <i>content description</i> be sure to consider the basic ARIA name, role, state, and value.  Though remember that TalkBack and the Android framework attempt to figure some of this out for you, based on the type of control you are using.  Test your application with TalkBack to ensure everything is announced properly.</string>
    <string name="aac_labels_about_paragraph_1_cont_desc"><i>Content descriptions</i> are similar to alt text in Hypertext Markup Language.  They provide a control that otherwise has no string content, with a description of what the control is.  When writing <i>content description</i> be sure to consider the basic Accessibile Rich Internet Applications name, role, state, and value.  Though remember that TalkBack and the Android framework attempt to figure some of this out for you, based on the type of control you are using.  Test your application with TalkBack to ensure everything is announced properly.</string>

    <string name="aac_labels_about_heading_2">Label For Attribute</string>
    <string name="aac_labels_about_visible_text_2">Visible Text 2</string>
    <string name="aac_labels_about_paragraph_2">The <i>label for</i> attribute allows you to set a visual label as labelling a control. This way, instead of duplicating the text of the label in the control\'s <i>content description</i>, you simple create an association between the two elements.  Then the control will announce the visible text, and remove any ambiguity about which control a label belongs to.</string>

    <string name="aac_labels_about_heading_3">Mixing Them Together</string>
    <string name="aac_labels_about_visible_text_3">Visible Text 3</string>
    <string name="aac_labels_about_paragraph_3">Using both a <i>label for</i> and a <i>content description</i> is generally not required, and unless handled carefully can be confusing.  If a control requires more context than a simple label can provide, it may be better to consider elements of your design that would require this.  Though, a <i>content description</i> can be used to group sets of controls, that require additional labelling otherwise.  Just be careful not to overload TalkBack users with information or worse, duplicate information.</string>

    <string name="aac_labels_broken_content_heading">Background Color Components</string>
    <string name="aac_labels_setting_1">Red</string>
    <string name="aac_labels_setting_2">Green</string>
    <string name="aac_labels_setting_3">Blue</string>

    <string name="aac_labels_broken_conclusion">The labels are not associated with their controls.  As you tab across the various labels you are not sure whether the label refers to the value before, or after the visual label.</string>

    <string name="aac_labels_fixed_conclusion">By adding the <i>label for</i> attribute to the labels we create an association with the controls.  Now, when we highlight the control, we know which switch will toggle which setting.</string>

    <!-- ContDesc Story Strings-->
    <string name="aac_cont_desc_title">Content Descriptions</string>

    <!-- About Tab Strings-->
    <string name="aac_cont_desc_about_intro">In the Android Accessibility world there are multiple ways of providing alternate text for a control. The <i>content description</i> attribute is the most basic. It provides a control, <i>ImageView</i>, or other focusable object, that otherwise has no string content, with a description of what the object is. <i>Content descriptions</i> also allow accessibility services, like TalkBack, to describe the content to users, as the name implies. When writing <i>content descriptions</i>, be sure to consider the basic ARIA name, role, state, and value. Remember that TalkBack and the Android framework attempt to figure some of this out for you, based on the type of object you are using, but be sure to test your application with TalkBack to ensure everything is announced properly.</string>
    <string name="aac_cont_desc_about_intro_cont_desc">In the Android Accessibility world there are multiple ways of providing alternate text for a control. The <i>content description</i> attribute is the most basic. It provides a control, <i>ImageView</i>, or other focusable object, that otherwise has no string content, with a description of what the object is. <i>Content descriptions</i> also allow accessibility services, like TalkBack, to describe the content to users, as the name implies. When writing <i>content descriptions</i>, be sure to consider the basic Accessible Rich Internet Applications name, role, state, and value. Remember that TalkBack and the Android framework attempt to figure some of this out for you, based on the type of object you are using, but be sure to test your application with TalkBack to ensure everything is announced properly.</string>
    <string name="aac_cont_desc_about_heading_1">Null Content Description</string>
    <string name="aac_cont_desc_about_heading_2">Empty Content Description</string>
    <string name="aac_cont_desc_about_heading_3">When to Use Content Descriptions</string>
    <string name="aac_cont_desc_about_heading_4">Duplicated Information</string>
    <string name="aac_cont_desc_about_heading_5">How to Fix It</string>
    <string name="aac_cont_desc_about_paragraph_1_null">This image has a null <i>content description</i>, so you can\'t focus on it using TalkBack. A TalkBack user would have no way of knowing this image is here and could not obtain information about it.</string>
    <string name="aac_cont_desc_about_paragraph_2_empty">This image has a blank string as a <i>content description</i>, so you can focus on it with TalkBack, but the description is a default image number and that the image is \"unlabeled,\" which is entirely unhelpful. This occurs when the <i>content description</i> is hard-coded in xml as a blank string. If it is hardcoded as an empty string or assigned as an empty or blank string in a separate strings.xml file, the same effects as a null <i>content description</i> are seen.</string>
    <string name="aac_cont_desc_about_paragraph_3_when_to_use"><i>Content descriptions</i> should be used when there is a focusable object, such as an ImageView or control to provide information describing the object. <i>Content descriptions</i> do not need to (and should not) be used for background images, decorative borders, or other things that are not pertinent to the information being conveyed through your app or website.</string>
    <string name="aac_cont_desc_about_paragraph_4_duplicated_info">This image\'s <i>content description</i> exactly duplicates the visual label and thus provides no new information to a TalkBack user.</string>
    <string name="aac_cont_desc_about_paragraph_5_fix_it">Fixing this accessibility issue is simple. All you need to do is add a <i>content description</i> to objects that display pertinent information or perform a function such as non-decorative ImageViews, Switches, Buttons, other controls, etc. These <i>content descriptions</i> should be concise, but as descriptive as possible in order to provide a TalkBack user with the information necessary to interpret the object. The first two issues, null and empty <i>content descriptions</i>, can be fixed in this way. To fix the third issue, duplicated information, be sure to think about the best combination of <i>content description</i> and visual label so as not to be redundant, but still provide necessary information for a TalkBack user. </string>
    <string name="aac_cont_desc_about_fish_cont_desc">fish image</string>
    <string name="aac_cont_desc_about_fish_label">Fish Image</string>

    <!-- Broken Tab Strings-->
    <string name="aac_cont_desc_broken_heading_1">Look at these drawings of animals!</string>
    <string name="aac_cont_desc_broken_fish_label">Here is a drawing of a fish.</string>
    <string name="aac_cont_desc_broken_fish_cont_desc">Drawing of a fish</string>
    <string name="aac_cont_desc_broken_dog_label">Here is a drawing of a dog.</string>
    <string name="aac_cont_desc_broken_cat_label">Here is a drawing of a cat.</string>
    <string name="aac_cont_desc_broken_conclusion_1">Notice that the first image has duplicated information in the label and <i>content description</i>. While a TalkBack user knows what the image is, he or she does not gain any useful information from having both read out to him or her and are bogged down by redundant information.</string>
    <string name="aac_cont_desc_broken_conclusion_2">The second image has a <i>content description</i>, so it is focusable using TalkBack, but the <i>content description</i> is a blank string, so TalkBack describes the image by its image number and tells you that it is unlabeled. This limits a TalkBack user\'s access to information about your products, services, etc. Android Studio does not flag this as an accessibility warning. </string>
    <string name="aac_cont_desc_broken_conclusion_3">The third image is not focusable because it has a null <i>content description</i>. This means that a TalkBack user would not even know that this image exists and would miss out on this information on your app or website. The Android Studio linter flags this as an accessibility warning, as long as the check is enabled.</string>

    <!-- Fixed Tab Strings-->
    <string name="aac_cont_desc_fixed_heading_1">Look at these drawings of animals!</string>
    <string name="aac_cont_desc_fixed_intro">These two images are now accessible to a TalkBack user because they both have a <i>content description</i>.</string>
    <string name="aac_cont_desc_fixed_cat_cont_desc">Red cat on yellow background</string>
    <string name="aac_cont_desc_fixed_dog_cont_desc">Yellow dog on blue background</string>
    <string name="aac_cont_desc_fixed_fish_cont_desc">Yellow fish on red background</string>
    <string name="aac_cont_desc_fixed_fish_label">Here is a drawing of a fish.</string>
    <string name="aac_cont_desc_fixed_dog_label"> Here is a drawing of a dog.</string>
    <string name="aac_cont_desc_fixed_cat_label">Here is a drawing of a cat.</string>
    <string name="aac_cont_desc_fixed_conclusion">By assigning concise, descriptive <i>content descriptions</i> that provide different information than the labels to these ImageViews, you can now use TalkBack to gain information about these objects.</string>

    <!-- EditText Story Strings-->
    <string name="aac_edit_text_title">Edit Texts</string>

    <!-- About Tab Strings-->
    <string name="aac_edit_text_about_intro">The <i>EditText</i> object is a subclass of the <i>TextView</i> object that is configured to be able to be edited by users. A thin veneer is overlaid on a <i>TextView</i>  before a user selects it. When a user selects an <i>EditText</i>, the keyboard appears and the user can enter data, which then appears in the <i>TextView</i>. The <i>EditText</i> object possesses the capability to have a <i>hint</i> and/or <i>content description</i> attribute to describe what should be entered into the field, and can also be associated with a visual label using the <i>label for</i> attribute. <i>EditText</i> objects are not inherently accessible. If no <i>hint</i> or visual label is associated with the <i>EditText</i>, any user, regardless of whether he or she is using TalkBack, would find it difficult to know what to put into the text field.</string>
    <string name="aac_edit_text_about_heading_2_hints">Hint Attribute</string>
    <string name="aac_edit_text_about_heading_3_cont_desc">Content Description Attribute</string>
    <string name="aac_edit_text_about_heading_4_mixing">Mixing Them Together</string>
    <string name="aac_edit_text_about_heading_5_label_for">Label For Attribute</string>
    <string name="aac_edit_text_about_paragraph_2_hints">The<i>EditText</i> below utilizes the <i>hint</i> attribute, so the <i>hint</i> is visible within the text field when it is empty (either before a user has entered data or after a user has deleted all previously entered data). On some devices, <i>hints</i> require TalkBack to announce them regardless of the <i>EditText\'s</i> content, so a TalkBack user always knows what is supposed to be in the <i>EditText</i> when the <i>hint</i> attribute is used, but on most, <i>hints</i> are not read aloud by TalkBack after they are no longer visible on the screen, making the <i>EditText</i> boxes inaccessible in most cases.</string>
    <string name="aac_edit_text_about_paragraph_3_cont_desc">This <i>EditText</i> has only a <i>content description</i>. This means that there is no visible text or label associated with the <i>EditText</i>. TalkBack will read out the <i>content description</i>, but only if the <i>EditText</i> is empty, meaning that if a user has entered data, TalkBack will no longer announce what the <i>EditText</i> is for.</string>
    <string name="aac_edit_text_about_paragraph_4_mixing_1">The <i>EditText</i> below has both a <i>content description</i> and a <i>hint</i> associated with it. This causes the <i>content description</i> to be ignored entirely and only the <i>hint</i> to be used. It is best practice to avoid using <i>content descriptions</i> to describe <i>EditText</i> objects due to their lack of functionality in general. </string>
    <string name="aac_edit_text_about_paragraph_6_mixing_2">The <i>EditText</i> below has a visual label associated with the <i>EditText</i> via the <i>label for</i> attribute, a <i>hint</i>, and a <i>content description</i>. The <i>content description</i> is completely ignored by TalkBack and offers nothing in terms of accessibility. It is often best not to mix labels and <i>hint</i> for <i>EditText</i> objects as it becomes redundant for all users, but can be useful to provide users a guide for formatting their information (for example, a <i>hint</i> for a phone number could be (###)-###-### ).</string>
    <string name="aac_edit_text_about_paragraph_5_label_for">The <i>EditText</i> below has a visual label beside it that utilizes the <i>label for</i>  attribute to associate the visual label with the <i>EditText</i>. TalkBack will announce the label as part of its description for the <i>EditText</i> regardless of the <i>EditText\'s</i> content. Non-TalkBack users have a constant visual clue that indicates what should be in the <i>EditText</i>.</string>

    <!-- Broken Tab Strings -->
    <string name="aac_edit_text_broken_heading_1_demo">Complete Your Profile</string>
    <string name="aac_edit_text_broken_conclusion_1">Notice that these <i>EditText</i> boxes have visible labels; however, these labels are not associated with the <i>EditText</i> boxes. A TalkBack user would be unsure which <i>EditText</i> requires which piece of information when scrolling through the objects on this page. </string>
    <string name="aac_edit_text_broken_conclusion_2">These <i>EditText</i> boxes have visible text within them, but the text is not part of the <i>hint</i> attribute, but rather coded to be pre-populated text in the <i>EditText</i>. This initially alerts both a TalkBack or non-TalkBack user to the information desired in the <i>EditText</i>, but it is troublesome for any user; it is cumbersome to enter the data and inaccessible once data has been entered because the descriptive text does not repopulate nor does TalkBack announce it if a user deletes the data. Additionally, a TalkBack user would not know to delete the text already in the <i>EditText</i> because the initial readout sounds the same as if the text was a <i>hint</i>.</string>

    <!-- Fixed Tab Strings -->
    <string name="aac_edit_text_fixed_heading_1_demo_1">Complete Your Profile</string>
    <string name="aac_edit_text_fixed_heading_2_wrong">Don\'t Do This</string>
    <string name="aac_edit_text_fixed_heading_3_demo_2">Complete Your Profile</string>
    <string name="aac_edit_text_fixed_conclusion_1">By eliminating pre-populated text and instead using the <i>hint</i> attribute for each <i>EditText</i> field, it may seem like these <i>EditText</i> boxes are accessible, but don\'t be fooled - they aren\'t. Once a user enters data into the text field, the <i>hint</i> disappears, and on most devices TalkBack no longer announces the <i>hint</i>. This means that a TalkBack user no longer knows which piece of information belongs in which field after data has been entered, unless they delete all data in the <i>EditText</i>.</string>
    <string name="aac_edit_text_fixed_conclusion_2">By associating the <i>EditText</i> field with its label by using the <i>label for</i> attribute, it is clear to a TalkBack user which box requires which information. By only using a <i>hint</i> where it is needed to provide additional information about formatting, TalkBack gives concise and useful readouts. </string>

    <!-- Labels, Hints, Content Descriptions -->
    <string name="aac_edit_text_about_cont_desc">This is a content description</string>
    <string name="aac_edit_text_about_hint">This is a hint</string>
    <string name="aac_edit_text_about_label">This is a label:</string>
    <string name="aac_edit_text_first_name_label">First name:</string>
    <string name="aac_edit_text_last_name_label">Last name:</string>
    <string name="aac_edit_text_phone_num_label">Phone number:</string>
    <string name="aac_edit_text_com_name_label">Company name:</string>
    <string name="aac_edit_text_first_name_hint">First name</string>
    <string name="aac_edit_text_last_name_hint">Last name</string>
    <string name="aac_edit_text_phone_num_hint">Phone number</string>
    <string name="aac_edit_text_com_name_hint">Company name</string>
    <string name="aac_edit_text_fixed_phone_num_hint">(###) - ### - ####</string>
    <string name="title_activity_splash_screen">SplashScreen</string>

    <!-- Acronyms -->
    <string name="aac_acronym_annoucement_title">Acronym Announcement</string>

    <string name="aac_acronym_about_heading_1">TalkBack</string>
    <string name="aac_acronym_about_cont_desc">Sometimes developers use <i>acronyms</i> in their apps to shorten verbose and commonly used phrases. Unfortunately, to <i>TalkBack</i> users, these <i>acronyms</i> are often read out incorrectly by <i>TalkBack</i>. This can be quite confusing since <i>TalkBack</i> users cannot tell when it is an <i>acronym</i> being read or simply regular text. This story demonstrates the challenges that <i>acronyms</i> create, and shows how to fix the issue.</string>
    <string name="aac_acronym_about_talkback">With so many different devices out there, each coming with a different preinstalled version of <i>TalkBack</i>, predicting how the device specific version of <i>TalkBack</i> will interpret any given <i>acronym</i> can be difficult. To avoid confusing <i>TalkBack</i> users, we must find a solution such that the software always knows what an <i>acronym</i> means.</string>

    <string name="aac_acronym_broken_heading_1">What\'s Wrong</string>
    <string name="aac_acronym_broken_flight">Flight XY-111 to Los Angeles, CA is on time to depart in 45m</string>
    <string name="aac_acronym_broken_whats_wrong">Depending on which device or version of Android is being used, CA - meaning \"California\" - may have been read out by <i>TalkBack</i> as: \"Certificate Authority\". Another possible <i>TalkBack</i> bug, 45m - meaning \"forty-five minutes\" - may have been announced as \"forty-five meters\". This can become very problematic for <i>TalkBack</i> users.</string>

    <string name="aac_acronym_flight_cont_desc">Flight X Y 111 to Los Angeles, California is on time to depart in forty-five minutes</string>

    <string name="aac_acronym_fixed_heading_1">The Fix</string>
    <string name="aac_acronym_the_fix">By adding a <i>content description</i> for the text field with the same text from the body, but replacing the <i>acronyms</i> with their actual meanings. Now, CA is always announced as \"California\" and 45m is always \"forty-five minutes\", no matter which device or version of Android the user has.</string>
    <string name="aac_acronym_the_fix_cont_desc">By adding a content description for the text field with the same text from the body, but replacing the acronyms with their actual meanings. Now, C-A is always announced as California and forty-five M is always forty-five minutes, no matter which device or version of android the user has.</string>

    <!-- TalkBack Story -->
    <string name="aac_talkBack_title">TalkBack</string>

    <string name="aac_talkBack_switch_on">TalkBack simulation switch, ON</string>
    <string name="aac_talkBack_switch_off">TalkBack simulation switch, OFF</string>

    <string name="aac_talkBack_tab_title_demo">Demo</string>
    <string name="aac_talkBack_tab_title_advanced">Advanced</string>

    <!-- TalkBack About Tab -->
    <string name="aac_talkBack_about_description">Turn on TalkBack and click on this icon in the upper right hand corner of any story to simulate what it\'s like to rely on TalkBack to navigate through the screen.</string>
    <string name="aac_talkBack_about_what_is_talkBack_heading">What is TalkBack?</string>
    <string name="aac_talkBack_about_how_to_use_heading">How to Use TalkBack</string>
    <string name="aac_talkBack_about_how_to_turn_on_heading">How to Turn on TalkBack</string>
    <string name="aac_talkBack_about_try_it_heading">Try It Out!</string>

    <string name="aac_talkBack_about_what_is_talkBack_paragraph"><i>TalkBack</i> is a pre-installed screen reader and accessibility tool on Android devices. When activated, it uses cues such as audible announcements, vibrations, and sounds to provide users with the information they need to navigate the screen. <i>TalkBack</i> works with <i>Explore by Touch</i>, which is a system feature, to enable users to touch the screen and hear what is selected, along with other valuable information such as which actions are available or which other screen elements are associated with the selected element. </string>
    <string name="aac_talkBack_about_how_to_turn_on_paragraph"><i>TalkBack</i> can be turned on by going into Settings > Accessibility > TalkBack and toggle the switch to turn it on (you will need to accept some conditions first). </string>
    <string name="aac_talkBack_about_how_to_use_paragraph">Although there are dozens of shortcuts and gestures that help most efficiently utilize <i>TalkBack</i>, there are a few that are most important.</string>

    <string name="aac_talkBack_control_1"><b><i>Swipe down or right:</i></b> This scrolls \"down\" through views that can be highlighted.</string>
    <string name="aac_talkBack_control_2"><b><i>Swipe up or left:</i></b> This scrolls \"up\" through views that can be highlighted.</string>
    <string name="aac_talkBack_control_3"><b><i>Double tap:</i></b> This clicks on whichever view is currently highlighted. If clicking triggers an action for the current view, it will be triggered by this gesture when <i>TalkBack</i> is activated.</string>
    <string name="aac_talkBack_control_4"><b><i>Two fingered scroll:</i></b> To scroll down a screen, you need to use two fingers when <i>TalkBack</i> is activated.</string>

    <!-- TalkBack Demos Tab -->
    <string name="aac_talkBack_demos_scroll_disclaimer">If you need to scroll down the page to view all its content when TalkBack is activated, don\'t forget to scroll with two fingers instead of one!</string>

    <string name="aac_talkBack_demos_step1_heading">Step 1: Turn on TalkBack</string>
    <string name="aac_talkBack_demos_step2_heading">Step 2: Scroll Down Through Views</string>
    <string name="aac_talkBack_demos_step3_heading">Step 3: Scroll Up Through Views</string>
    <string name="aac_talkBack_demos_step4_heading">Step 4: Explore By Touch</string>
    <string name="aac_talkBack_demos_step5_heading">Step 5: Double Tap to Click</string>
    <string name="aac_talkBack_demos_test_heading">Test Your Skills!</string>

    <string name="aac_talkBack_demos_step1_paragraph">Is TalkBack turned on? If not, see the \"About\" tab for instructions on how to do so. Once that\'s done, come back to this page and tap this TextView.</string>
    <string name="aac_talkBack_demos_step2_paragraph_1">Swipe right or down until you reach the EditText below.</string>
    <string name="aac_talkBack_demos_step2_paragraph_2">Now follow the prompts that TalkBack gives you and double tap to edit.</string>
    <string name="aac_talkBack_demos_step2_editText_label">Enter your name</string>
    <string name="aac_talkBack_demos_step3_paragraph_1">Continue swiping right or down until you reach this view. Now try going backwards. Swipe left or up to scroll up through the views on the page. Continue this pattern until you get the hang of scrolling through views.</string>
    <string name="aac_talkBack_demos_imageView1_cont_desc">@string/aac_cont_desc_fixed_cat_cont_desc</string>
    <string name="aac_talkBack_demos_step4_paragraph_1">Tap and hold on the screen. Now move your finger around to explore the views this way. Once you lift your finger, whichever view was under it last will be highlighted.</string>
    <string name="aac_talkBack_demos_imageView2_cont_desc">@string/aac_cont_desc_fixed_dog_cont_desc</string>
    <string name="aac_talkBack_demos_step4_paragraph_2">Continue to explore the screen by touch, but at the end highlight the \"Advanced\" tab below.</string>
    <string name="aac_talkBack_demos_step5_paragraph">Once a clickable view, such as the EditText above, is highlighted, double tap the screen anywhere to perform a click action. Navigate to the EditText above (there are multiple ways to do this!) and double tap to edit it.</string>
    <string name="aac_talkBack_demos_test_paragraph">Click on this icon in the upper right hand corner to simulate what it\'s like to rely on TalkBack to navigate through the screen. See if you can navigate to different views and screens using your new <i>TalkBack</i> skills.</string>

    <!-- TalkBack Advanced Tab -->
    <string name="aac_talkBack_advanced_intro_heading">Advanced Gestures</string>
    <string name="aac_talkBack_advanced_conclusion_heading">Personalize Gestures</string>

    <string name="aac_talkBack_advanced_intro_paragraph">Now that you know the basics of how to navigate the screen using <i>TalkBack</i>, you can learn about some more handy gestures and shortcuts that can aid <i>TalkBack</i> users.</string>
    <string name="aac_talkBack_advanced_conclusion_paragraph">You can use the default gestures that are programmed into the pre-installed <i>TalkBack</i> or you can set your own by navigating to Settings > Accessibility > TalkBack > Settings > Touch Exploration > Manage gestures. This menu also hosts the entire set of default gestures that <i>TalkBack</i> recognizes.</string>

    <string name="aac_talkBack_advanced_title_gesture">Gesture</string>
    <string name="aac_talkBack_advanced_title_action">Action</string>
    <string name="aac_talkBack_advanced_gestures_heading">Gestures</string>

    <string name="aac_talkBack_advanced_gesture_1">Up then down</string>
    <string name="aac_talkBack_advanced_gesture_2">Down then up</string>
    <string name="aac_talkBack_advanced_gesture_3">Up then left</string>
    <string name="aac_talkBack_advanced_gesture_4">Down then left</string>
    <string name="aac_talkBack_advanced_gesture_5">Right then left</string>
    <string name="aac_talkBack_advanced_gesture_6">Left then right</string>

    <string name="aac_talkBack_advanced_action_1"><i><b>Up then down:</b></i> Highlight first element on the screen</string>
    <string name="aac_talkBack_advanced_action_2"><i><b>Down then up:</b></i> Highlight the last element on the screen</string>
    <string name="aac_talkBack_advanced_action_3"><i><b>Up then left:</b></i> Home button</string>
    <string name="aac_talkBack_advanced_action_4"><i><b>Down then left:</b></i> Back button</string>
    <string name="aac_talkBack_advanced_action_5"><i><b>Right then left:</b></i> Scroll forward, if the view is longer than one page</string>
    <string name="aac_talkBack_advanced_action_6"><i><b>Left then right:</b></i> Scroll backwards, if the view is longer than one page</string>

    <!-- Separator Heading Story -->
    <string name="aac_separator_heading_title">Demos</string>

    <!-- Tabbed Navigation Story -->
    <string name="aac_tab_nav_title">Tabbed Navigation</string>
    <string name="aac_tab_nav_cat_tab_title">Cat</string>
    <string name="aac_tab_nav_dog_tab_title">Dog</string>
    <string name="aac_tab_nav_fish_tab_title">Fish</string>

    <string name="aac_tab_nav_about_intro">Tabs can be implemented using the action bar or simply utilizing the <i>TabHost</i> class. They are a useful tool for developers, but are not accessible without some adding some features programmatically.  </string>
    <string name="aac_tab_nav_about_heading_1">Name, Role, Value, State</string>
    <string name="aac_tab_nav_demo_heading">Animal Images</string>
    <string name="aac_tab_nav_about_paragraph_1">The tab bar at the bottom of this page has an added feature that forces <i>TalkBack</i> to announce the name, role, value and state of the selected tab. Alerting users to the name of the selected object is the only information provided by the app for <i>TalkBack</i> to announce. Alerrting users to the role of the selected object, namely that it is a tab, is necessary for two important reasons. Firstly, without knowing that the object is a tab, <i>TalkBack</i> users cannot know to expect content change. Secondly, without the knowledge that the selected object is a tab, <i>TalkBack</i> users do not know what they can do with the selected object. By announcing the value, meaning which tab of how many, and if the tab is currently selected, <i>TalkBack</i> users gain valuable information about what is on the screen and can decide what their next action should be.</string>

    <string name="aac_tab_nav_broken_conclusion">Notice that <i>Talkback</i> does not announce anything other than the visible text, the name, when a tab is selected. This means that <i>TalkBack</i> users do not gain useful information about the role, value, or state of the object and do not know much about what is on the screen or what their options are.</string>

    <string name="aac_tab_nav_fixed_conclusion">By forcing <i>TalkBack</i> to announce the role, value, and state of the tab in addition to its name, <i>TalkBack</i> users know exactly what is on the screen and can decide what their next action should be.</string>

    <!-- TODO: Remove or change this placeholder text -->
    <string name="hello_blank_fragment">Hello blank fragment</string>

</resources>
